import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as r}from"./app-b8d2a4ee.js";const n={},d=r('<h1 id="d-队列queue" tabindex="-1"><a class="header-anchor" href="#d-队列queue" aria-hidden="true">#</a> d.队列Queue</h1><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><h3 id="队列是什么queue" tabindex="-1"><a class="header-anchor" href="#队列是什么queue" aria-hidden="true">#</a> 队列是什么Queue</h3><p>队列是一种<strong>特殊的线性表</strong>，他的特殊性在于我们只能操作他头部和尾部的元素，中间的元素我们操作不了，我们只能在他的头部进行删除，尾部进行添加。就像大家排队到银行取钱一样，先来的肯定要排到前面，后来的只能排在队尾，所有元素都要遵守这个操作，没有VIP会员，所以走后门插队的现象是不可能存在的，他是一种<strong>先进先出的数据结构</strong></p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231106193620605.png" alt="队列原理图" tabindex="0" loading="lazy"><figcaption>队列原理图</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231106193659871.png" alt="队列是什么" tabindex="0" loading="lazy"><figcaption>队列是什么</figcaption></figure><h2 id="结构设计一个队列-考虑封装问题" tabindex="-1"><a class="header-anchor" href="#结构设计一个队列-考虑封装问题" aria-hidden="true">#</a> 结构设计一个队列，考虑封装问题</h2><h3 id="判断条件" tabindex="-1"><a class="header-anchor" href="#判断条件" aria-hidden="true">#</a> 判断条件</h3><ul><li><p>初容大于零</p></li><li><p>满了不能加</p></li><li><p>空了不能取</p></li></ul><h3 id="队列接口iqueuedesc" tabindex="-1"><a class="header-anchor" href="#队列接口iqueuedesc" aria-hidden="true">#</a> 队列接口IQueueDesc</h3><h3 id="myqueue" tabindex="-1"><a class="header-anchor" href="#myqueue" aria-hidden="true">#</a> MyQueue</h3>',11),t=[d];function u(h,c){return a(),i("div",null,t)}const l=e(n,[["render",u],["__file","4.队列Queue.html.vue"]]);export{l as default};
