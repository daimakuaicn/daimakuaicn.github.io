import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,f as n}from"./app-b8d2a4ee.js";const d={},r=n('<h1 id="e-链表" tabindex="-1"><a class="header-anchor" href="#e-链表" aria-hidden="true">#</a> e.链表</h1><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231106193924141.png" alt="链表" tabindex="0" loading="lazy"><figcaption>链表</figcaption></figure><p><strong>单向链表</strong> 一个节点指向下一个节点</p><p>n个节点离散分配，彼此通过指针相连，每个节点只有一个<strong>前驱节点</strong>，每个节点只有一个<strong>后续节点</strong>，<strong>首节点</strong>没有前驱节点，<strong>尾节点</strong>没有后续节点。确定一个链表我们只需要<strong>头指针</strong>，通过头指针就可以把整个链表都能推出来。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231106194020851.png" alt="什么事链表" tabindex="0" loading="lazy"><figcaption>什么事链表</figcaption></figure><h2 id="链表的优缺点" tabindex="-1"><a class="header-anchor" href="#链表的优缺点" aria-hidden="true">#</a> 链表的优缺点</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>插入和删除操作效率高</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231106194133338.png" alt="链表的插入和删除" tabindex="0" loading="lazy"><figcaption>链表的插入和删除</figcaption></figure><ul><li>动态性能更好</li></ul><blockquote><p>链表不需要像数组那样预先指定固定的大小，而是可以随时动态的增长或缩小。</p><p>链表是真正的动态数据结构，不需要处理固定容量的问题</p></blockquote><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>查找慢</li></ul><p>由于链表中的节点不是连续存储的，无法像数组一样根据索引直接计算出每个节点的地址。</p><p>必须从头节点开始遍历链表，直到找到目标节点，这导致了链表的随机访问效率较低。</p><ul><li>额外的存储空间</li></ul><p>链表的每个节点都需要存储指向下一个节点的指针，这会占用额外的存储空间。</p><p>相比于数组，链表需要更多的内存空间来存储相同数量的数据元素</p><h2 id="架构设计一个单链表-考虑封装问题" tabindex="-1"><a class="header-anchor" href="#架构设计一个单链表-考虑封装问题" aria-hidden="true">#</a> 架构设计一个单链表，考虑封装问题</h2><h3 id="构造node节点" tabindex="-1"><a class="header-anchor" href="#构造node节点" aria-hidden="true">#</a> 构造node节点</h3><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231106194355376.png" alt="构造node节点" tabindex="0" loading="lazy"><figcaption>构造node节点</figcaption></figure><h3 id="初始化定义-mylinkedlistv1" tabindex="-1"><a class="header-anchor" href="#初始化定义-mylinkedlistv1" aria-hidden="true">#</a> 初始化定义：MyLinkedListV1</h3><p>1</p><h3 id="第1版mylinkedlistv1" tabindex="-1"><a class="header-anchor" href="#第1版mylinkedlistv1" aria-hidden="true">#</a> 第1版MyLinkedListV1</h3><p>1</p><h3 id="增-改进版本" tabindex="-1"><a class="header-anchor" href="#增-改进版本" aria-hidden="true">#</a> 增(改进版本)</h3><p>1</p><h3 id="第2版mylinkedlistv2" tabindex="-1"><a class="header-anchor" href="#第2版mylinkedlistv2" aria-hidden="true">#</a> 第2版MyLinkedListV2</h3><p>1</p><h3 id="第3版mylinkedlistv3" tabindex="-1"><a class="header-anchor" href="#第3版mylinkedlistv3" aria-hidden="true">#</a> 第3版MyLinkedListV3</h3><p>1</p><h2 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结" aria-hidden="true">#</a> 小总结</h2><p>1</p><h2 id="leetcode链表练习经典题-课堂练习" tabindex="-1"><a class="header-anchor" href="#leetcode链表练习经典题-课堂练习" aria-hidden="true">#</a> leetcode链表练习经典题，课堂练习</h2><p>1</p><h3 id="反转链表" tabindex="-1"><a class="header-anchor" href="#反转链表" aria-hidden="true">#</a> 反转链表</h3><p>1</p>',38),t=[r];function h(s,l){return i(),e("div",null,t)}const p=a(d,[["render",h],["__file","5.链表.html.vue"]]);export{p as default};
